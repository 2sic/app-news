@inherits ToSic.Sxc.Dnn.RazorComponent
@using ToSic.Razor.Blade;

@* Show Menu of toolbars to add a new article, manage the articles and edit the view configuration *@
@helper AdminToolbarMenu(dynamic viewConfiguration) {
  @* Create iso-date for date pre-filling *@
  var tomorrow = DateTime.Now.Date.AddDays(1).ToString("yyyy-MM-dd");

  <div class="app-news-admin-menu">
    <div class="toolbar">
      @Edit.Toolbar(actions: "new", contentType: "News", prefill: new { Date = tomorrow })
      <span>@App.Resources.LabelAdminMenuNew</span>

      @Edit.Toolbar(toolbar: new object[] {
        new {
          showCondition = true,
          command = new {
            action = "contentitems",
            contentType = "News",
            filters = new { ModuleId = Dnn.Module.ModuleID }
          }
        }
      })
      <span>@App.Resources.LabelAdminMenuManage</span>
    </div>
    <div>@Edit.Toolbar(viewConfiguration)</div>
  </div>
}

@* Show all categories as buttons with which the filtering can be changed *@
@helper CategoryFilter(dynamic filteredCategory) {
  var categories = AsList(App.Data["Category"]);
  var selectedId = filteredCategory == null ? -1 : filteredCategory.EntityId;

  <div class="app-catinfo">
    <span>
      @(Tag.A().Class("btn btn-primary btn-sm" + (selectedId == -1 ? " active" : ""))
          .Href(Link.To())
          .Wrap(App.Resources.LabelCategoryAll))
    </span>

    @foreach (var cat in categories) {
      <span>
        @(Tag.A().Class("btn btn-primary btn-sm" + (cat.EntityId == selectedId ? " active" : ""))
            .Href(Link.To(parameters: "category=" + cat.UrlKey))
            .Wrap(cat.Name))
      </span>
    }
  </div>
}

@* List the articles in a single column *@
@helper ListArticlesSingleCol(dynamic articlesToShow, string categoryQueryString) {
  <div class="row">
    @foreach (var article in articlesToShow) {
      <div class="col-12" @Edit.TagToolbar(article)>
        <div class="app-details-link">
          @Tag.A().Class("link-overlay").Href(Link.To(pageId: GetDetailsPageTabId(), parameters: DetailPageQueryString(article, categoryQueryString)))
          <div class="row">
            <div class="mb-3 mb-md-0 col-12 col-md-6 col-lg-4">
              @* Show image or placeholder *@
              @Parts.ImageOrPlaceholder(article, false)
            </div>
            <div class="col-12 col-md-6 col-lg-8">
              @* Show Title, Date, Category, Teaser and read more link *@
              @Parts.ArticleInformation(article, "h2")
            </div>
          </div>
        </div>
      </div>
    }
  </div>
}

@* List the articles in multiple columns (max 3 columns) *@
@helper ListArticlesMultiCol(dynamic articlesToShow, bool showImages, string categoryQueryString) {
  <div class="row">
    @foreach (var article in articlesToShow) {
      <div class="col-12 col-md-6 col-lg-4" @Edit.TagToolbar(article)>
        <div class="app-details-link">
          @Tag.A().Class("link-overlay").Href(Link.To(pageId: GetDetailsPageTabId(), parameters: DetailPageQueryString(article, categoryQueryString)))

          @if(showImages) {
            <div class="app-img-wrapper mb-3">
              @* Show image or placeholder *@
              @Parts.ImageOrPlaceholder(article, false)
            </div>
          }

          @* Show Title, Date, Category, Teaser and read more button *@
          @Parts.ArticleInformation(article, "h3")
        </div>
      </div>
    }
  </div>
}

@functions {
  dynamic _parts;
  dynamic Parts {
    get {
      if(_parts == null) {
        _parts = CreateInstance("_Parts.cshtml");
      }
      return _parts;
    }
  }

  /**
  * Returns the tabID of the details page, configured in the app settings
  */
  public int GetDetailsPageTabId() {
    return int.Parse((AsEntity(App.Settings).GetBestValue("DetailsPage")).Split(':')[1]);
  }

  /**
  * Generate the query string for the detail link of an article, preserving current category parameters
  */
  public string DetailPageQueryString(dynamic article, string categoryQueryString) {
    var pageInUrl = Request.QueryString["page"];
    var categoryParams = Text.Has(categoryQueryString)
      ? "category=" + categoryQueryString + "&"
      : "";
    var pageParams = Text.Has(pageInUrl)
      ? "page=" + pageInUrl + "&"
      : "";

    return categoryParams + pageParams + "details=" + article.EntityId.ToString() + "&" + article.UrlKey;
  }
}