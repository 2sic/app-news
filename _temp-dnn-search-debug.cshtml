
<h2>test 2dm</h2>
@functions {
  string showParams(Query qry) {
    var innerP = string.Join(";", qry.Params().Select(p => p.Key + "=" + p.Value));
    var innerPDic = qry.Configuration.LookUps.LookUp(qry.Params());
    var innerResolved = string.Join(";", innerPDic.Select(p => p.Key + "=" + p.Value));
    return "Original: " + innerP + "\nResolved: " + innerResolved;
  }

  string showQuerySpecs(Query qry) {
    var qTitle = qry.Definition.Title;
    var msg = "Query: " + qry + "; Title:'" + qTitle + "'\n"; //; Params: " + qrP + "\n";
    msg += "*Params*\n" + showParams(qry) + "\n\n";
    return msg;
  }

  string showStreamSpecs(string name, DataStream stm) {
    return "Stream: '" + name + "' (" + stm.Count() + ") " + stm + "\n";
  }

  string showStreamInDsSpecs(string dsName, string streamName, IDataTarget dt) {
      var stm = dt.In[streamName] as DataStream;
      return dsName + ".In:" + showStreamSpecs(streamName, stm) + "\n";
  }

  string showStreamOutDsSpecs(string dsName, string streamName, ToSic.Eav.DataSources.IDataSource dt) {
      var stm = dt[streamName] as DataStream;
      return dsName + ".Out:" + showStreamSpecs(streamName, stm) + "\n";
  }

  string debugQuery() {
    var msg = "";
    var searchIndex = Data["SearchIndex"] as DataStream;
    var siCount = searchIndex.Count();

    msg += showStreamSpecs("SearchIndex", searchIndex);
    msg += "SearchIndex: " + searchIndex + "(" + siCount + ")\n\n";

    var upStreamQuery = searchIndex.Source as Query;
    msg += showQuerySpecs(upStreamQuery);

    var mainTarget = upStreamQuery.Source as PassThrough;
    var innerQueryRun = mainTarget["Default"].Source as QueryRun;
    var innerQuery = innerQueryRun.Query as Query;
    msg += showQuerySpecs(innerQuery);

    var streamMerge = mainTarget["SearchIndex"].Source as StreamMerge;
    msg += "StreamMerge:" + showStreamSpecs("Default", streamMerge["Default"] as DataStream);

    msg += showStreamInDsSpecs("StreamMerge", "Default", streamMerge);
    msg += showStreamInDsSpecs("StreamMerge", "NewsWithoutExpiry", streamMerge);

    var innerNewsCatFilter = innerQuery.Source["News"].Source;

    msg += showStreamOutDsSpecs("CatFilter", "News", innerQuery.Source);
    return msg;
  }

}

@{

}

@Html.Raw(Tags.Nl2Br(debugQuery()))