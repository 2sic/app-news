@inherits ToSic.Sxc.Dnn.RazorComponent
@using ToSic.Razor.Blade;
@using Dynlist = System.Collections.Generic.IEnumerable<dynamic>;
@using ToSic.Sxc.Search;
@using ToSic.Eav.Run;
@*
  Bootstrap 3 - read the readme.md section "CSS Framework Detection"
*@
@if(Connect.Koi.Koi.Is("bs3")) {
  @RenderPage("bs3/_List.cshtml")
  return;
}
@*
  Bootstrap 4 or Unknown CSS Framework
*@
@RenderPage("shared/_Assets.cshtml")

@{
  var parts = CreateInstance("shared/_Parts.cshtml");

  var viewConfiguration = Content;
  var articles = AsList(Data["News"]);
  var categories = AsList(App.Data["Category"]);
  var categoryQueryString = Request.QueryString["category"];
  var filteredCategory = AsList(Data["Category"]).FirstOrDefault();
  var pages = AsList(Data["Paging"]).FirstOrDefault();

  @* Get main view information  *@
  var detailLinkMid = Text.Has(viewConfiguration.MainModuleId) ? viewConfiguration.MainModuleId : Dnn.Module.ModuleID.ToString();
  int newsPageTabId = Text.Has(viewConfiguration.NewsPage)
    ? int.Parse((AsEntity(viewConfiguration).GetBestValue("NewsPage")).Split(':')[1])
    : Dnn.Tab.TabID;
}

@* Show Toolbar Menu if admin *@
@if(Edit.Enabled) {
  @parts.AdminToolbarMenu(viewConfiguration)
}

<div class="app-news app-news-list">
  @* Show category filter if the news are filtered by category querystring *@
  @if (Text.Has(categoryQueryString) && filteredCategory != null) {
    @parts.CategoryFilter(categories, filteredCategory, newsPageTabId)
  }

  @* List the articles *@
  @parts.ListArticlesSingleCol(articles, newsPageTabId, detailLinkMid, categoryQueryString)

  @* Show "Back to list" button if the news are filtered by category querystring *@
  @if (Text.Has(categoryQueryString) && filteredCategory != null) {
    @parts.BackToListButton(newsPageTabId)
  }

  @* Show pagination if configured *@
  @if (viewConfiguration.ShowPagination) {
    @parts.Paging(pages, categoryQueryString)
  }
</div>

@functions{
  /// <summary>
  /// Populate the search - ensure that each entity has an own url/page
  /// </summary>
  /// <param name="searchInfos"></param>
  /// <param name="moduleInfo"></param>
  /// <param name="beginDate"></param>

  public override void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IContainer moduleInfo, DateTime beginDate) {
    foreach (var si in searchInfos["SearchIndex"]) {
      var parts = CreateInstance("shared/_Parts.cshtml");
      var article = AsDynamic(si.Entity);
      var viewConfiguration = AsList(searchInfos["Default"]).FirstOrDefault();
      var detailLinkMid = Text.Has(viewConfiguration.MainModuleId) ? viewConfiguration.MainModuleId : Dnn.Module.ModuleID.ToString();

      si.QueryString = parts.DetailPageQueryString(detailLinkMid, article, "");
      // Blog Code
      // si.QueryString = "post=" + AsDynamic(si.Entity).UrlKey;
    }

    // Blog Code FIXME: why?
    // Remove primary stream from search results
    searchInfos.Remove("Default");
  }
}
