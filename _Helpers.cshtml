@using System.Dynamic
@using System.IO

@functions {

    // convert \n line breaks to <br>s
    public System.Web.IHtmlString ConvertLineBreaks(string original) {
        return Html.Raw(HttpUtility.HtmlEncode(original).Replace("\n", "<br />"));
    }



    // check a link, prepare target window, icon etc. based on various settings
	public dynamic LinkInfos(string link, string window, string icon) {
        var fileExtensions = new List<string> { ".pdf", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".ppsx", ".txt" };
        
        // this will contain the result
        IDictionary<string, object> linkInfo = new ExpandoObject();

        // found something?
        var found = !String.IsNullOrEmpty(link);
        linkInfo.Add("Found", found);

        // process remaining properties, in case we want to override them with automatic stuff
        if(found) {
            var linkExt = System.IO.Path.GetExtension(link.ToLower());
            var isDoc = fileExtensions.Contains(linkExt);
            
            // try to find out if it's a local link
            var isInternal = link.Contains(Dnn.Portal.PortalAlias.HTTPAlias) 
                || link.StartsWith("/") // absolute link in same site
                || link.StartsWith("#") // hash-link on same page
                || link.StartsWith("."); // relative link from this page
            
            // auto-detect icon based on file type if it's stays on the same site
            // but only if no icon was specified already
            if(String.IsNullOrEmpty(icon))
                icon = isDoc 
                    ? "glyphicon-file" // if doc, then file-icon
                    : (isInternal 
                        ? "glyphicon-triangle-right" // else if internal, use play-button
                        : "glyphicon-new-window");   // else if external, show "open new window"

            // optionally auto-detect the window
            if(String.IsNullOrEmpty(window) || window == "auto")
                window = isInternal && !isDoc ? "_self" : "_blank";

        }

        // add properties to ExpandoObject
        linkInfo.Add("Icon", icon);
        linkInfo.Add("Window", window);
        // we could add these properties too, but at the moment they are not needed
        // linkInfo.Add("Extension", linkExt);
        // linkInfo.Add("IsDoc", isDoc);

        return linkInfo;
	}


}