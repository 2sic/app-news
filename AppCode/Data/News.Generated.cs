// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "News.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class News
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v17.06.02
// App/Edition: News/
// User:        2sic Web-Developer
// When:        2024-04-09 07:32:22Z
using System;
using System.Collections.Generic;
using ToSic.Sxc.Adam;
using ToSic.Sxc.Data;

namespace AppCode.Data
{
  // This is a generated class for News 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// News data. <br/>
  /// Generated 2024-04-09 07:32:22Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.Categories`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class News: AutoGenerated.ZagNews
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.News in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZagNews: Custom.Data.CustomItem
  {
    /// <summary>
    /// Categories as list of Category.
    /// </summary>
    /// <remarks>
    /// Generated to return child-list child because field settings had Multi-Value=true. The type Category was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// An IEnumerable of specified type, but can be empty.
    /// </returns>
    public IEnumerable<Category> Categories => _categories ??= _item.Children<Category>("Categories");
    private IEnumerable<Category> _categories;

    /// <summary>
    /// Content as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Content", scrubHtml: true) etc.
    /// </summary>
    public string Content => _item.String("Content", fallback: "");

    /// <summary>
    /// Date as DateTime.
    /// </summary>
    public DateTime Date => _item.DateTime("Date");

    /// <summary>
    /// Image as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("Image")
    /// </summary>
    public string Image => _item.Url("Image");

    /// <summary>
    /// Get the file object for Image - or null if it's empty or not referencing a file.
    /// </summary>
    public IFile ImageFile => _item.File("Image");

    /// <summary>
    /// Get the folder object for Image.
    /// </summary>
    public IFolder ImageFolder => _item.Folder("Image");

    /// <summary>
    /// InnerContent as single item of ITypedItem.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. 
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public ITypedItem InnerContent => _innerContent ??= _item.Child("InnerContent");
    private ITypedItem _innerContent;

    /// <summary>
    /// Lightbox as bool. <br/>
    /// To get nullable use .Get("Lightbox") as bool?;
    /// </summary>
    public bool Lightbox => _item.Bool("Lightbox");

    /// <summary>
    /// ShowFrom as DateTime.
    /// </summary>
    public DateTime ShowFrom => _item.DateTime("ShowFrom");

    /// <summary>
    /// ShowTeaserInDetail as bool. <br/>
    /// To get nullable use .Get("ShowTeaserInDetail") as bool?;
    /// </summary>
    public bool ShowTeaserInDetail => _item.Bool("ShowTeaserInDetail");

    /// <summary>
    /// ShowTo as DateTime.
    /// </summary>
    public DateTime ShowTo => _item.DateTime("ShowTo");

    /// <summary>
    /// Teaser as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Teaser", scrubHtml: true) etc.
    /// </summary>
    public string Teaser => _item.String("Teaser", fallback: "");

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Title.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Title => _item.String("Title", fallback: "");

    /// <summary>
    /// UrlKey as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("UrlKey", scrubHtml: true) etc.
    /// </summary>
    public string UrlKey => _item.String("UrlKey", fallback: "");
  }
}