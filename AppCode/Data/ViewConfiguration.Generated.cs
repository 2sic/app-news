// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "ViewConfiguration.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class ViewConfiguration
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v17.06.02
// App/Edition: News/
// User:        2sic Web-Developer
// When:        2024-04-09 07:32:22Z
namespace AppCode.Data
{
  // This is a generated class for ViewConfiguration 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// ViewConfiguration data. <br/>
  /// Generated 2024-04-09 07:32:22Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.Category`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class ViewConfiguration: AutoGenerated.ZagViewConfiguration
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.ViewConfiguration in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZagViewConfiguration: Custom.Data.CustomItem
  {
    /// <summary>
    /// Category as single item of Category.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type Category was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public Category Category => _category ??= _item.Child<Category>("Category");
    private Category _category;

    /// <summary>
    /// ItemsInPage as int. <br/>
    /// To get other types use methods such as .Decimal("ItemsInPage")
    /// </summary>
    public int ItemsInPage => _item.Int("ItemsInPage");

    /// <summary>
    /// ShowPagination as bool. <br/>
    /// To get nullable use .Get("ShowPagination") as bool?;
    /// </summary>
    public bool ShowPagination => _item.Bool("ShowPagination");

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Title.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Title => _item.String("Title", fallback: "");
  }
}